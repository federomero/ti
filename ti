#! /usr/bin/env ruby

unless ARGV.length > 0
  puts "Usage: ti <client> [task]"
  exit 1
end

client = ARGV.shift.dup
task = ARGV.dup.join(' ')

require 'rubygems'
require 'ostruct'

Infinity = 1.0/0

module Ti
  Timer = Object.new
  class << Timer

    attr_accessor :client, :task, :start_time, :end_time

    def config
      @config ||= OpenStruct.new
    end

    def every n, priority = Infinity, &block
      on :minutes, priority do
        block.call if minutes % n == 0
      end
    end

    def on name, priority = Infinity, &block
      callbacks[name] ||= []
      callbacks[name] << [block, priority]
    end

    def callbacks
      @callbacks ||= {}
    end

    def seconds
      (Time.now - self.start_time).round
    end

    def minutes
      (seconds.to_f / 60).round
    end

    def finish
      self.end_time = Time.now
      run_callbacks(:finish)
      exit 0
    end

    def start
      self.start_time = Time.now
      run_callbacks(:start)
      loop do
        begin
          t = Time.now
          run_callbacks(:minutes)
          elapsed = Time.now - t
          sleep([60 - elapsed, 0].max)
        rescue SystemExit, Interrupt
          finish
        end
      end
    end

    protected

    def run_callbacks name
      if callbacks[name]
        callbacks[name].sort_by(&:last).map(&:first).each(&:call)
      end
    end
  end
end

Ti::Timer.client = client
Ti::Timer.task = task

Ti::Timer.config.plugins_dir = ENV['TI_PLUGINS_DIR'] || File.join(ENV['HOME'], '.ti')
Dir[File.join(Ti::Timer.config.plugins_dir, "*.rb")].each {|file| require file }
Dir[File.join(Ti::Timer.config.plugins_dir, "*/init.rb")].each {|file| require file }

Ti::Timer.start
